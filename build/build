#!/bin/bash

# See the LICENSE file at the top of the project tree for copyright and license details.
#
# This script automates the process of preparing Firefox ESR for its use with I2Pd.
# It discovers the latest Firefox ESR, downloads it, verifies its integrity,
# extracts it, removes unnecessary files, updates configuration settings and extensions,
# and finally copies necessary scripts and configurations for the I2Pd Browser.

set -Eeuo pipefail

trap 'echo "[Error] A problem occurred on line $LINENO." >&2' ERR

# Helper functions
die() { echo "[Error] $*" >&2; exit 1; }
need() { command -v "$1" >/dev/null 2>&1 || die "'$1' is required but not installed."; }

# Change to the directory where this script lives
dir="$(cd "$(dirnam "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)"
cd "$dir" || die "Could not access the script directory: $dir"

# Detect system architecture
arch="$(uname -m)"

# Configuration
language="${language:-en-US}"
ESR_PRODUCT="${ESR_PRODUCT:-firefox-esr-latest}"

# Check required tools
need curl
need sha512sum
need grep
need sed
need tar
need awk

# Map architecture for redirector (os=) and for checksums path (linux-*)
case "$arch" in
	amd64|x86_64)
		arch=x86_64
		fx_os="linux64"
		fx_dir="linux-x86_64"
		;;
	i386|i686)
		arch=i686
		fx_os="linux"
		fx_dir="linux-i686"
		;;
	*)
		die "Your system architecture is not supported: $arch"
		;;
esac

echo "Discovering the latest Firefox ESR for $fx_os ($arch), language: $language ..."
final_url="$(curl -s -L -I -o /dev/null -w '%{url_effective}' \
	"https://download.mozilla.org/?product=${ESR_PRODUCT}&os=${fx_os}&lang=${language}")" || die "Failed to query the redirector."

[[ -n "$final_url" ]] || die "Could not resolve the Firefox download URL via the redirector."

file="$(basename "$final_url")"

# Try to extract the version from the filename
if [[ "$file" =~ ^firefox-([0-9.]+esr)\.tar\.(xz|bz2)$ ]]; then
	version="${BASH_REMATCH[1]}"
else
	die "Could not parse the version from filename: $file"
fi

ftpmirror="https://ftp.mozilla.org/pub/firefox/releases/$version"
filepath="$fx_dir/$language/$file"

echo "This script will prepare Firefox version $version for use with I2Pd."

# Download Firefox (from the resolved final URL)
echo "Downloading Firefox $version..."
curl -L -f -# -O "$final_url" || die "Could not download the file. Check your internet connection."

[[ -f "$file" ]] || die "Downloaded file not found: $file"

# Download and verify the checksums file
echo "Downloading checksums and verifying SHA512..."
curl -L -f -# -O "$ftpmirror/SHA512SUMS" || die "Could not download SHA512SUMS."

# Get the expected checksum from the line whose last field matches $filepath
recv_sum="$(awk -v f="$filepath" '$NF==f {print $1; exit}' SHA512SUMS)"
file_sum="$(sha512sum "$file" | awk '{print $1}')"

if [[ -z "$recv_sum" || "$recv_sum" != "$file_sum" ]]; then
	die "Checksum verification failed!"
else
	echo "Checksum correct."
	rm -f SHA512SUMS
fi

# Extract the downloaded archive
echo "Extracting the archive, please wait..."
[[ -d ../browser ]] && rm -rf ../browser
case "$file" in
	*.tar.xz)  tar xJf "$file" ;;
	*.tar.bz2) tar xjf "$file" ;;
	*)         tar xf  "$file"  ;;
esac
rm -f "$file"
mv firefox ../browser
mkdir -p ../browser/data

# Remove unnecessary files
echo "Removing unnecessary files..."
rm -f ../browser/crashreporter*
rm -f ../browser/minidump-analyzer
rm -f ../browser/pingsender
rm -f ../browser/precomplete
rm -f ../browser/removed-files
rm -f ../browser/update*
rm -f ../browser/Throbber-small.gif
rm -f ../browser/browser/crashreporter-override.ini
rm -f ../browser/browser/features/formautofill@mozilla.org.xpi
rm -f ../browser/browser/features/screenshots@mozilla.org.xpi
rm -rf ../browser/icons

# Update configuration files
echo "Updating configuration files..."
sed -i 's/Enabled=1/Enabled=0/g' ../browser/application.ini || true
sed -i 's/ServerURL=.*/ServerURL=-/' ../browser/application.ini || true

# Download the NoScript extension
echo "Downloading the NoScript extension..."
mkdir -p ../browser/browser/extensions
curl -L -f -# -o ../browser/browser/extensions/\{73a6fe31-595d-460b-a920-fcc0f8843232\}.xpi \
	"https://addons.mozilla.org/firefox/downloads/latest/noscript/latest.xpi"

# Add standard configuration files
echo "Adding standard configs..."
cp -r preferences/* ../browser/
cp -r profile/* ../browser/data/

# Copy desktop launch scripts
echo "Copying desktop launch scripts..."
cp -r scripts/* ../browser/
cp scripts/start-i2pd-browser.desktop ../

echo "Finished!"
